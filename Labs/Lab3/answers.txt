Problem 1

1. undefined reference to 'pow' (already had -lpthread in my Makefile)
2. I need to use '-lm'
3. No more undefined references (if I did not already have -lpthread I assume I would get an undefined reference to
pthread_create)


Problem 2

1. The main thread passes arguments to the other threads through use of a struct (struct thread_args).
2. Calloc is better to use here than malloc because we are allocating space for an array and will need multiple blocks so we
can store multiple array values. Calloc also initializes the allocated memory with 0 which makes it safer for accessing
immediately.
3. A detached thread automatically releases its resources when it terminates. It allows threads to execute independently from
each other and they will continue without blocking or synchronizing. A detached thread cannot join other threads.
4. After the threads are joined, it accesses the result value of the struct that was passed to each thread which contains
the result of each thread's computation.
5. The thread will start but never finish and it may also interupt the creation/termination of other threads.
6. The thread will run "/bin/ls" on the current directory and display that in the terminal but the thread will terminate and
prevent any other threads from being created. 


Problem 4

1. No, you cannot guarantee because of context switching. Also, ctime is not a thread-safe function.
2. The time printed does not print the milliseconds of the current time and since each thread takes milliseconds to run,
there is a lot of wiggle room for the termination time. You can avoid this by using localtime to produce a struct tm* and
printing its attributes. Also, the ctime does not print right after the thread ends. I'm not sure if you can avoid this, but
you can make the prints a bit more organized by having all the termination dates printed at the end/after they are all
joined together by passing the termination time as one of the struct arguments in myargs_ptr. Lastly, ctime is not a
thread-safe function which means that the ctime of one thread may override the result of another thread's call to ctime. To
fix this, you can use ctime_r which saves the buffer to the memory of the thread rather than the library. 
